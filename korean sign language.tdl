;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Korean Sign Language
;;; created at:
;;;     Fri Nov 13 17:03:38 UTC 2015
;;; based on Matrix customization system version of:
;;;     Mon Nov  2 17:43:24 UTC 2015
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

topic-comment :+ [ SYNSEM.L-PERIPH +, NON-HEAD-DTR.SYNSEM.L-PERIPH + ].

inflected :+ [ SUBJECT-AGR-FLAG luk,
    OBJECT-AGR-FLAG luk ].

infl-satisfied :+ [ SUBJECT-AGR-FLAG na-or-+,
    OBJECT-AGR-FLAG na-or-+ ].

;png :+ [ PER person ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.
4th := person.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

pro-noun-lex := no-spr-noun-lex.

s-pro-noun-lex := pro-noun-lex.

a-pro-noun-lex := pro-noun-lex.

i-pro-noun-lex := pro-noun-lex.

j-pro-noun-lex := pro-noun-lex.

common-noun-lex := noun-lex.

;;; Verbs

verb-lex := basic-verb-lex & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

intransitive-verb-lex := verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

plain-verb-lex := transitive-verb-lex.

locus-agreement-verb-lex := transitive-verb-lex.

spatial-verb-lex := intransitive-verb-lex.

double-agr-verb-lex := locus-agreement-verb-lex & object-agr-rule-dtr &
  [ INFLECTED [ SUBJECT-AGR-FLAG -,
                OBJECT-AGR-FLAG - ] ].

single-agr-verb-lex := locus-agreement-verb-lex & object-agr-rule-dtr &
  [ INFLECTED.OBJECT-AGR-FLAG - ].

path-agr-verb-lex := locus-agreement-verb-lex.

facing-agr-verb-lex := locus-agreement-verb-lex.

path-forward-agr-verb-lex := path-agr-verb-lex.

path-backward-agr-verb-lex := path-agr-verb-lex.

facing-only-agr-verb-lex := facing-agr-verb-lex.

facing-path-forward-agr-verb-lex := facing-agr-verb-lex.

facing-path-backward-agr-verb-lex := facing-agr-verb-lex.

double-path-forward-agr-tr-verb-lex := double-agr-verb-lex & path-forward-agr-verb-lex.

double-path-backward-agr-tr-verb-lex := double-agr-verb-lex & path-backward-agr-verb-lex.

double-facing-only-agr-tr-verb-lex := double-agr-verb-lex & facing-only-agr-verb-lex.

double-facing-path-forward-agr-tr-verb-lex := double-agr-verb-lex & facing-path-forward-agr-verb-lex.

double-facing-path-backward-agr-tr-verb-lex := double-agr-verb-lex & facing-path-backward-agr-verb-lex.

single-path-forward-agr-tr-verb-lex := single-agr-verb-lex & path-forward-agr-verb-lex.

single-path-backward-agr-tr-verb-lex := single-agr-verb-lex & path-backward-agr-verb-lex.

single-facing-only-agr-tr-verb-lex := single-agr-verb-lex & facing-only-agr-verb-lex.

single-facing-path-forward-agr-tr-verb-lex := single-agr-verb-lex & facing-path-forward-agr-verb-lex.

single-facing-path-backward-agr-tr-verb-lex := single-agr-verb-lex & path-backward-agr-verb-lex.

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

s-determiner-lex := determiner-lex & no-icons-lex-item.

a-determiner-lex := determiner-lex & no-icons-lex-item.

i-determiner-lex := determiner-lex & no-icons-lex-item.

j-determiner-lex := determiner-lex & no-icons-lex-item.

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ MC +,
                           HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

object-agr-rule-dtr := word-or-lexrule.

;;; Lexical rule types

subject-agr-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & object-agr-rule-dtr &
  [ INFLECTED [ SUBJECT-AGR-FLAG +,
                OBJECT-AGR-FLAG #object-agr ],
    DTR double-agr-verb-lex &
        [ INFLECTED.OBJECT-AGR-FLAG #object-agr ] ].

underspec-subject-agr-lex-rule := subject-agr-lex-rule-super.

spec-subject-agr-lex-rule := subject-agr-lex-rule-super.

subject-agr-a-lex-rule := spec-subject-agr-lex-rule.

subject-agr-i-lex-rule := spec-subject-agr-lex-rule.

subject-agr-j-lex-rule := spec-subject-agr-lex-rule.

object-agr-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ OBJECT-AGR-FLAG +,
                SUBJECT-AGR-FLAG #subject-agr ],
    DTR object-agr-rule-dtr &
        [ INFLECTED.SUBJECT-AGR-FLAG #subject-agr ] ].

object-agr-s-lex-rule := object-agr-lex-rule-super.

object-agr-a-lex-rule := object-agr-lex-rule-super.

object-agr-i-lex-rule := object-agr-lex-rule-super.

object-agr-j-lex-rule := object-agr-lex-rule-super.

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ SYNSEM.L-PERIPH -,
    HEAD-DTR.SYNSEM.L-PERIPH - ].

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ SYNSEM [ LOCAL.CAT.MC +,
             NON-LOCAL.SLASH 0-dlist ],
    HEAD-DTR.SYNSEM [ L-PERIPH -,
                      LOCAL.CAT.VAL.COMPS < > ] ].

subj-head-nmc-phrase := basic-head-subj-nmc-phrase & head-final &
  [ SYNSEM.LOCAL.CAT.MC -,
    HEAD-DTR.SYNSEM.NON-LOCAL.SLASH.LIST < [ CONT.HOOK.ICONS-KEY focus-or-topic ] > ].

infostr-dislocated-phrase := narrow-focus &
  [ SYNSEM.LOCAL.CAT [ MC +,
                       VAL.SUBJ < > ],
    C-CONT [ RELS <!  !>,
             HCONS <!  !>,
             ICONS <! info-str & #icons &
                      [ IARG1 #clause,
                        IARG2 #index ] !> ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ MC -,
                                  HEAD verb ],
                            CONT.HOOK [ INDEX #clause,
                                        CLAUSE-KEY #clause ] ],
    NON-HEAD-DTR.SYNSEM [ LIGHT -,
                          LOCAL [ CAT.HEAD +np,
                                  CONT.HOOK [ INDEX #index,
                                              ICONS-KEY #icons ] ] ] ].

infostr-filler-head-phrase := basic-head-filler-phrase & infostr-dislocated-phrase & head-final &
  [ SYNSEM.L-PERIPH +,
    HEAD-DTR.SYNSEM [ L-PERIPH -,
                      LOCAL.CAT.VAL.SUBJ < > ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CONT.HOOK.ICONS-KEY topic ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
